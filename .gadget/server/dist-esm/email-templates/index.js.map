{"version":3,"sources":["/var/gadget/codegen/framework-1756630026360-Css7ce/src/email-templates/index.ts"],"sourcesContent":["import { Config } from \"../AppConfigs.js\";\nimport { emails } from \"../emails.js\";\nimport { GlobalNotSetError } from \"../errors.js\";\nimport { Globals } from \"../globals.js\";\nimport { RESET_PASSWORD_TEMPLATE } from \"./reset-password.js\";\nimport { VERIFY_EMAIL_TEMPLATE } from \"./verify-email.js\";\n\ninterface templateData {\n  app_name?: string;\n  url: string;\n}\n\n/**\n * Renders an email template using EJS.\n * @param {string} template - The EJS template content\n * @param {object} data - The data to be passed to the template\n * @returns {string} - The rendered email template\n */\nexport const renderEmailTemplate = (template: string, data: Record<string, any>): string => {\n  if (!emails) {\n    throw new GlobalNotSetError(\"emails is not yet defined\");\n  }\n\n  try {\n    return emails.render(template, data);\n  } catch (error) {\n    Globals.logger.error({ error, name: \"emails\" }, \"An error occurred rendering your EJS email template\");\n    throw error;\n  }\n};\n\n/**\n * Renders the \"Verify Email\" template.\n * * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app, defaults to Config.appName (optional)\n * @param {string} data.url - The url for the user to verify their account.\n * @returns {string} - The rendered html of the email template\n */\nexport const renderVerifyEmailTemplate = (data: templateData): string => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(VERIFY_EMAIL_TEMPLATE, { app_name, url });\n};\n\n/**\n * Renders the \"Reset Password\" template.\n * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app. If not provided, it defaults to Config.appName.\n * @param {string} data.url - The url for the user to reset their password.\n * @returns {string} - The rendered html of the email template.\n */\nexport const renderResetPasswordTemplate = (data: templateData): string => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(RESET_PASSWORD_TEMPLATE, { app_name, url });\n};\n"],"names":["Config","emails","GlobalNotSetError","Globals","RESET_PASSWORD_TEMPLATE","VERIFY_EMAIL_TEMPLATE","renderEmailTemplate","template","data","render","error","logger","name","renderVerifyEmailTemplate","appName","app_name","url","renderResetPasswordTemplate"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,uBAAuB,QAAQ,sBAAsB;AAC9D,SAASC,qBAAqB,QAAQ,oBAAoB;AAO1D;;;;;CAKC,GACD,OAAO,MAAMC,sBAAsB,CAACC,UAAkBC;IACpD,IAAI,CAACP,QAAQ;QACX,MAAM,IAAIC,kBAAkB;IAC9B;IAEA,IAAI;QACF,OAAOD,OAAOQ,MAAM,CAACF,UAAUC;IACjC,EAAE,OAAOE,OAAO;QACdP,QAAQQ,MAAM,CAACD,KAAK,CAAC;YAAEA;YAAOE,MAAM;QAAS,GAAG;QAChD,MAAMF;IACR;AACF,EAAE;AAEF;;;;;;CAMC,GACD,OAAO,MAAMG,4BAA4B,CAACL;IACxC,IAAI,CAACR,OAAOc,OAAO,IAAI,CAACN,KAAKO,QAAQ,EAAE;QACrC,MAAM,IAAIb,kBAAkB;IAC9B;IAEA,MAAMc,MAAMR,KAAKQ,GAAG;IACpB,MAAMD,WAAWP,KAAKO,QAAQ,IAAIf,OAAOc,OAAO;IAChD,OAAOR,oBAAoBD,uBAAuB;QAAEU;QAAUC;IAAI;AACpE,EAAE;AAEF;;;;;;CAMC,GACD,OAAO,MAAMC,8BAA8B,CAACT;IAC1C,IAAI,CAACR,OAAOc,OAAO,IAAI,CAACN,KAAKO,QAAQ,EAAE;QACrC,MAAM,IAAIb,kBAAkB;IAC9B;IAEA,MAAMc,MAAMR,KAAKQ,GAAG;IACpB,MAAMD,WAAWP,KAAKO,QAAQ,IAAIf,OAAOc,OAAO;IAChD,OAAOR,oBAAoBF,yBAAyB;QAAEW;QAAUC;IAAI;AACtE,EAAE"}