{"version":3,"sources":["../effects.ts"],"sourceRoot":"","sourcesContent":["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { validateBelongsToLink } from \"../auth\";\nimport { getActionContextFromLocalStorage } from \"../effects\";\nimport { AppTenancyKey } from \"../tenancy\";\nimport type { AnyParams } from \"../types\";\n\n/**\n * Applicable for multi-tenant Store apps(public apps)\n * Enforces that the given record is only accessible by the current store or customer\n * *\n * @param params - incoming data validated against the current `storeHash`\n * @param record - record used to validate or set the `storeHash` on\n */\nexport async function preventCrossStoreDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { storeBelongsToField?: string }\n): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross store data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\"The `params` parameter is required in preventCrossStoreDataAccess(params, record)\");\n  }\n  if (!record) {\n    throw new Error(\"The `record` parameter is required in preventCrossStoreDataAccess(params, record)\");\n  }\n\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.bigcommerce?.storeId === undefined) {\n    return;\n  }\n\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const input = params[model.apiIdentifier];\n  const storeBelongsToField = options?.storeBelongsToField;\n  validateBelongsToLink({\n    input,\n    record,\n    params,\n    model,\n    tenantId: appTenancy.bigcommerce.storeId,\n    tenantModelKey: bigcommerceStoreKey,\n    tenantBelongsToField: storeBelongsToField,\n    tenantType: TenantType.Store,\n    tenantName: \"BigCommerce\",\n  });\n}\n\nconst bigcommerceModelKey = (modelName: string): string => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-BigCommerce-${modelKey}`;\n};\n\nconst bigcommerceStoreKey: string = bigcommerceModelKey(\"Store\");\n\nconst enum TenantType {\n  Store = \"store\",\n}\n"],"names":["preventCrossStoreDataAccess","params","record","options","context","getActionContextFromLocalStorage","type","Error","model","appTenancy","AppTenancyKey","bigcommerce","storeId","undefined","input","apiIdentifier","storeBelongsToField","validateBelongsToLink","tenantId","tenantModelKey","bigcommerceStoreKey","tenantBelongsToField","tenantType","tenantName","bigcommerceModelKey","modelName","modelKey","replaceAll"],"mappings":";;;;+BAasBA;;;eAAAA;;;sBAZgB;yBACW;yBACnB;AAUvB,eAAeA,4BACpBC,MAAiB,EACjBC,MAAyB,EACzBC,OAA0C;IAE1C,MAAMC,UAAUC,IAAAA,yCAAgC;IAEhD,IAAID,QAAQE,IAAI,IAAI,UAAU;QAC5B,MAAM,IAAIC,MAAM;IAClB;IACA,IAAI,CAACN,QAAQ;QACX,MAAM,IAAIM,MAAM;IAClB;IACA,IAAI,CAACL,QAAQ;QACX,MAAM,IAAIK,MAAM;IAClB;IAEA,MAAMC,QAAQJ,QAAQI,KAAK;IAC3B,MAAMC,aAAaL,OAAO,CAACM,sBAAa,CAAC;IAEzC,uCAAuC;IACvC,IAAID,YAAYE,aAAaC,YAAYC,WAAW;QAClD;IACF;IAEA,6EAA6E;IAC7E,IAAI,CAACL,OAAO;QACV;IACF;IAEA,MAAMM,QAAQb,MAAM,CAACO,MAAMO,aAAa,CAAC;IACzC,MAAMC,sBAAsBb,SAASa;IACrCC,IAAAA,2BAAqB,EAAC;QACpBH;QACAZ;QACAD;QACAO;QACAU,UAAUT,WAAWE,WAAW,CAACC,OAAO;QACxCO,gBAAgBC;QAChBC,sBAAsBL;QACtBM,UAAU;QACVC,YAAY;IACd;AACF;AAEA,MAAMC,sBAAsB,CAACC;IAC3B,MAAMC,WAAWD,UAAUE,UAAU,CAAC,KAAK;IAC3C,OAAO,CAAC,sBAAsB,EAAED,UAAU;AAC5C;AAEA,MAAMN,sBAA8BI,oBAAoB"}