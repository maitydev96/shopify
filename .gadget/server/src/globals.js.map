{"version":3,"sources":["../globals.ts"],"sourceRoot":"","sourcesContent":["import type { RequestContext } from \"@fastify/request-context\";\nimport type { AnyClient } from \"@gadgetinc/api-client-core\";\nimport { AsyncLocalStorage } from \"async_hooks\";\nimport type { Logger } from \"./AmbientContext\";\nimport { frameworkVersion, modelListIndex, modelsMap } from \"./metadata\";\nimport type { AnyActionContext, AnyAmbientContext, AnyEffectContext, AnyGlobalActionContext } from \"./types\";\n\nexport const actionContextLocalStorage: AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext> =\n  new AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext>();\n\n/**\n * Extend the @fastify/request-context types with Gadget's added reference to the current unit of work's context\n * See https://github.com/fastify/fastify-request-context#typescript\n * */\ndeclare module \"@fastify/request-context\" {\n  interface RequestContextData {\n    requestContext: AnyAmbientContext | AnyActionContext | AnyGlobalActionContext | AnyEffectContext;\n  }\n}\n\n/** The list of globals that the Gadget harness injects into the framework package */\nexport interface SettableGlobals {\n  logger: Logger;\n  modelValidator: (modelKey: string) => Promise<any>;\n  requestContext: RequestContext;\n  platformRequire: typeof require;\n  api: AnyClient;\n}\n\nexport type GlobalSetter = (globals: SettableGlobals) => void;\n\n/**\n * A container for all the global bits that the gadget-server package needs access to\n * Generally shouldn't be used directly by Gadget app code as the structure is subject to change\n * @internal\n **/\nexport class GadgetFrameworkGlobals {\n  /**\n   * A globally accessible API client instance, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  api: AnyClient = null as any;\n  /**\n   * Internal variable to store the model validator function, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  modelValidator: (modelKey: string) => Promise<any> = null as any;\n  /**\n   * Internal variable to store the request context module, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  requestContext: RequestContext = null as any;\n  /**\n   * A global logger instance that is userVisible and tagged with the platform source.\n   * @internal\n   */\n  logger: Logger = null as any;\n  /**\n   * Require function for importing code from the gadget platform context instead of the app's context.\n   * @internal\n   */\n  platformRequire: typeof require = null as any;\n  /**\n   * This is used internally to set the globals for this instance of the framework package.\n   * @internal\n   */\n  set: GlobalSetter = (globals: SettableGlobals): void => {\n    Object.assign(this, globals);\n  };\n\n  /**\n   * Lazy-loaded modules for use in the framework package from the gadget platform context.\n   * @internal\n   */\n  platformModules: {\n    lodash: () => any;\n    bcrypt: () => any;\n    compareVersions: () => any;\n    klona: () => any;\n  } = {\n    lodash: this._platformModuleRequirer(\"lodash\"),\n    klona: this._platformModuleRequirer(\"klona\"),\n    bcrypt: this._platformModuleRequirer(\"bcrypt\"),\n    compareVersions: this._platformModuleRequirer(\"compare-versions\"),\n  };\n\n  _platformModuleRequirer<T = any>(name: string): () => T {\n    let mod: T = null as any;\n    return () => {\n      if (!mod) {\n        if (!this.platformRequire) throw new Error(\"Globals.platformRequire is not set, has it been injected by the sandbox yet?\");\n        mod = this.platformRequire(name);\n      }\n      return mod;\n    };\n  }\n\n  /** re-export the generated metadata for easy access in the ambient context */\n  modelListIndex = modelListIndex;\n  modelsMap = modelsMap;\n  frameworkVersion = frameworkVersion;\n}\n\nexport const Globals: GadgetFrameworkGlobals = new GadgetFrameworkGlobals();\nexport const kGlobals: unique symbol = Symbol.for(\"gadget/kGlobals\");\n"],"names":["GadgetFrameworkGlobals","Globals","actionContextLocalStorage","kGlobals","AsyncLocalStorage","api","modelValidator","requestContext","logger","platformRequire","set","globals","Object","assign","platformModules","lodash","_platformModuleRequirer","klona","bcrypt","compareVersions","name","mod","Error","modelListIndex","modelsMap","frameworkVersion","Symbol","for"],"mappings":";;;;;;;;;;;IAoCaA,sBAAsB;eAAtBA;;IAmEAC,OAAO;eAAPA;;IAhGAC,yBAAyB;eAAzBA;;IAiGAC,QAAQ;eAARA;;;;yBAtGqB;;;;;;0BAE0B;AAGrD,MAAMD,4BACX,IAAIE,CAAAA,cAAgB,mBAAC;AA4BhB,MAAMJ;IACX;;;GAGC,GACDK,MAAiB,KAAY;IAC7B;;;GAGC,GACDC,iBAAqD,KAAY;IACjE;;;GAGC,GACDC,iBAAiC,KAAY;IAC7C;;;GAGC,GACDC,SAAiB,KAAY;IAC7B;;;GAGC,GACDC,kBAAkC,KAAY;IAC9C;;;GAGC,GACDC,MAAoB,CAACC;QACnBC,OAAOC,MAAM,CAAC,IAAI,EAAEF;IACtB,EAAE;IAEF;;;GAGC,GACDG,kBAKI;QACFC,QAAQ,IAAI,CAACC,uBAAuB,CAAC;QACrCC,OAAO,IAAI,CAACD,uBAAuB,CAAC;QACpCE,QAAQ,IAAI,CAACF,uBAAuB,CAAC;QACrCG,iBAAiB,IAAI,CAACH,uBAAuB,CAAC;IAChD,EAAE;IAEFA,wBAAiCI,IAAY,EAAW;QACtD,IAAIC,MAAS;QACb,OAAO;YACL,IAAI,CAACA,KAAK;gBACR,IAAI,CAAC,IAAI,CAACZ,eAAe,EAAE,MAAM,IAAIa,MAAM;gBAC3CD,MAAM,IAAI,CAACZ,eAAe,CAACW;YAC7B;YACA,OAAOC;QACT;IACF;IAEA,4EAA4E,GAC5EE,iBAAiBA,wBAAc,CAAC;IAChCC,YAAYA,mBAAS,CAAC;IACtBC,mBAAmBA,0BAAgB,CAAC;AACtC;AAEO,MAAMxB,UAAkC,IAAID;AAC5C,MAAMG,WAA0BuB,OAAOC,GAAG,CAAC"}