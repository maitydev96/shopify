{"version":3,"sources":["../effects.ts"],"sourceRoot":"","sourcesContent":["import type { FilterElement, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport path from \"path\";\nimport { validateBelongsToLink } from \"../auth\";\nimport { getActionContextFromLocalStorage, getCurrentContext, getModelByApiIdentifier, internalModelManagerForModel } from \"../effects\";\nimport { InvalidActionInputError } from \"../errors\";\nimport { Globals, kGlobals } from \"../globals\";\nimport { AppTenancyKey } from \"../tenancy\";\nimport type { AnyParams } from \"../types\";\nimport { assert } from \"../utils\";\nimport { invalidPlanDisplayNames, invalidPlanNames } from \"./constants\";\n\nexport const ShopifyShopState = {\n  Installed: { created: \"installed\" },\n  Uninstalled: { created: \"uninstalled\" },\n};\n\nexport const ShopifySyncState = {\n  Created: \"created\",\n  Running: \"running\",\n  Completed: \"completed\",\n  Errored: \"errored\",\n};\n\nexport const ShopifyBulkOperationState = {\n  Created: \"created\",\n  Completed: \"completed\",\n  Canceled: \"canceled\",\n  Failed: \"failed\",\n  Expired: \"expired\",\n};\n\nexport const ShopifySellingPlanGroupProductVariantState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\nexport const ShopifySellingPlanGroupProductState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\n/**\n * The following is used to power shopifySync model.\n * Learn more about syncing visit our docs: https://docs.gadget.dev/guides/plugins/shopify/syncing-shopify-data#syncing\n */\nexport async function shopifySync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { syncSince?: Date; syncSinceBy?: string; id: bigint; shopId: string; models: any; force: boolean } = assert(\n    record,\n    \"cannot start a shop sync from this action\"\n  );\n\n  const shopId = assert(syncRecord.shopId, \"a shop is required to start a sync\");\n\n  if (syncRecord.syncSinceBy && syncRecord.syncSinceBy !== \"created_at\" && syncRecord.syncSinceBy !== \"updated_at\") {\n    throw new InvalidActionInputError(\"syncSinceBy must be either 'created_at' or 'updated_at'\");\n  }\n\n  if (!syncRecord.models || (Array.isArray(syncRecord.models) && syncRecord.models.every((m) => typeof m == \"string\"))) {\n    try {\n      await effectAPIs.sync(\n        syncRecord.id.toString(),\n        shopId,\n        syncRecord.syncSince,\n        syncRecord.models,\n        syncRecord.force,\n        params.startReason,\n        syncRecord.syncSinceBy\n      );\n    } catch (error) {\n      context.logger.error({ error, connectionSyncId: syncRecord.id }, \"an error occurred starting shop sync\");\n      throw error;\n    }\n  } else {\n    throw new InvalidActionInputError(\"Models must be an array of api identifiers\");\n  }\n}\n\nexport async function abortSync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { id: bigint } = assert(record, \"a record is required to abort a shop sync\");\n\n  const syncId = assert(syncRecord.id, \"a sync id is required to start a sync\");\n\n  if (!params.errorMessage) {\n    record.errorMessage = \"Sync aborted\";\n  }\n\n  context.logger.info({ userVisible: true, connectionSyncId: syncId }, \"aborting sync\");\n\n  try {\n    await effectAPIs.abortSync(syncId.toString());\n  } catch (error) {\n    context.logger.error({ error, connectionSyncId: syncId }, \"an error occurred aborting sync\");\n    throw error;\n  }\n}\n\n/**\n * Applicable for multi-tenant Shopify apps(public apps), or Shopify Customer Extension apps\n * Enforces that the given record is only accessible by the current shop or customer\n *\n * For new records: sets the the current session's `shopId` to the record. If the tenant is a customer then will set the current sessions' customerId to the record.\n * For existing records: Verifies the record objects `shopId` and/or `customerId` matches the one from the current session.\n *\n * *\n * @param params - incoming data validated against the current `shopId`\n * @param record - record used to validate or set the `shopId` on\n * @param {Object} options - Additional options for cross-shop or cross-customer validation\n * @param {string} options.shopBelongsToField - Specifies which related model is used for cross-shop validation.\n * @param {string} options.customerBelongsToField - Specifies which related model is used for cross-customer validation.\n * @param {boolean} options.enforceCustomerTenancy - Whether or not to enforce customer tenacy. Defaults to true.\n */\nexport async function preventCrossShopDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { shopBelongsToField?: string; customerBelongsToField?: string; enforceCustomerTenancy?: boolean }\n): Promise<void> {\n  const enforceCustomerTenancy = options?.enforceCustomerTenancy ?? true;\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross shop data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\n      \"The `params` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  if (!record) {\n    throw new Error(\n      \"The `record` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n  const shopBelongsToField = options?.shopBelongsToField;\n  const customerBelongsToField = options?.customerBelongsToField;\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.shopify?.shopId === undefined) {\n    return;\n  }\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const shopId = String(appTenancy.shopify.shopId);\n  const customerId = appTenancy.shopify.customerId ? String(appTenancy.shopify.customerId) : undefined;\n\n  const input = params[model.apiIdentifier];\n  validateBelongsToLink({\n    input,\n    record,\n    params,\n    tenantId: shopId,\n    model,\n    tenantModelKey: ShopifyShopKey,\n    tenantBelongsToField: shopBelongsToField,\n    tenantType: TenantType.Shop,\n    tenantName: \"Shopify\",\n  });\n\n  if (customerId && enforceCustomerTenancy) {\n    validateBelongsToLink({\n      input,\n      record,\n      params,\n      tenantId: customerId,\n      model,\n      tenantModelKey: ShopifyCustomerKey,\n      tenantBelongsToField: customerBelongsToField,\n      tenantType: TenantType.Customer,\n      tenantName: \"Shopify\",\n    });\n  }\n}\n\nexport function validShopsFilter(\n  shopModelFiles: { apiIdentifier: string }[],\n  params: { skipInvalidPlans?: boolean; additionalFilters?: FilterElement[] }\n): FilterElement[] {\n  const filter: FilterElement[] = [{ state: { inState: \"created.installed\" } }, ...(params.additionalFilters ?? [])];\n\n  const planNameField = shopModelFiles.find((f) => f.apiIdentifier === \"planName\");\n  const planDisplayNameField = shopModelFiles.find((f) => f.apiIdentifier === \"planDisplayName\");\n\n  if (params.skipInvalidPlans && (planNameField || planDisplayNameField)) {\n    const planCondition = {\n      AND: [] as FilterElement[],\n    };\n\n    if (planNameField) {\n      planCondition.AND.push({\n        OR: [{ planName: { isSet: true, notIn: invalidPlanNames } }, { planName: { isSet: false } }],\n      });\n    }\n\n    if (planDisplayNameField) {\n      planCondition.AND.push({\n        OR: [{ planDisplayName: { isSet: true, notIn: invalidPlanDisplayNames } }, { planDisplayName: { isSet: false } }],\n      });\n    }\n\n    filter.push(planCondition);\n  }\n\n  return filter;\n}\n\n/**\n * Syncs Shopify models across all models\n *\n * @param params - list of Shopify app credentials to sync data from\n * @param syncSince - starting point for data sync (default: all time)\n * @param models - list of model names to sync data from\n * @param force - enforces syncswithout checking if they're up to date\n * @param startReason - a string reason stored on the created 'shopifySync' records\n */\nexport async function globalShopifySync(params: {\n  apiKeys: string[];\n  syncSince: string | Date;\n  models: string[];\n  force?: boolean;\n  startReason?: string;\n}): Promise<void> {\n  const context = getCurrentContext();\n  const effectAPIs = assert(context.effectAPIs, \"effect apis is missing from the current context\");\n  const api = assert(context.api, \"api client is missing from the current context\");\n\n  const { apiKeys, syncSince, models, force, startReason } = params;\n\n  if (!apiKeys || apiKeys.length === 0) {\n    throw new InvalidActionInputError(\"missing at least 1 api key\");\n  }\n\n  const {\n    shopModelIdentifier,\n    installedViaKeyFieldIdentifier,\n    shopifySyncModelApiIdentifier,\n    runShopifySyncAction,\n    accessTokenIdentifier,\n    forceFieldIdentifier,\n  } = await effectAPIs.getSyncIdentifiers();\n  const shopModel = getModelByApiIdentifier(shopModelIdentifier);\n  const manager = internalModelManagerForModel(api, shopModelIdentifier, []);\n\n  const pageSize = 250;\n  let pageInfo: { first?: number; endCursor?: string; hasNextPage: boolean } = { first: pageSize, hasNextPage: true };\n  const results: { id: string; domain: string; state: Record<string, any>; [key: string]: any }[] = [];\n\n  const filter = validShopsFilter(\n    Object.values(shopModel.fields).map((f) => ({ apiIdentifier: f.apiIdentifier })),\n    {\n      additionalFilters: [{ [installedViaKeyFieldIdentifier]: { in: apiKeys } }],\n    }\n  );\n\n  try {\n    while (pageInfo.hasNextPage) {\n      const records = await manager.findMany({\n        filter,\n        first: pageInfo.first,\n        after: pageInfo.endCursor,\n      });\n      results.push(...(records as any[]));\n      pageInfo = records.pagination.pageInfo;\n    }\n  } catch (error) {\n    context.logger.info({ userVisible: true, error, apiKeys }, \"could not get shops for all API keys\");\n    throw error;\n  }\n\n  for (const result of results) {\n    const shopId = result.id;\n    const domain = result.domain ?? result.myshopifyDomain;\n    context.logger.debug({ shopId, domain }, \"syncing shop\");\n\n    // skip the sync if there is no accessToken set or if the state is uninstalled\n    if (context[kGlobals].platformModules.lodash().isEmpty(result[accessTokenIdentifier]) || result.state?.created == \"uninstalled\") {\n      context.logger.info({ shopId, domain }, \"skipping sync for shop without access token or is uninstalled\");\n      continue;\n    }\n\n    try {\n      const shopifySyncModelManager = context[kGlobals].platformModules.lodash().get(api, runShopifySyncAction.dotNotationPath);\n      await shopifySyncModelManager[runShopifySyncAction.apiIdentifier]({\n        [shopifySyncModelApiIdentifier]: {\n          shop: {\n            _link: shopId,\n          },\n          domain,\n          syncSince,\n          models,\n          ...(forceFieldIdentifier ? { force } : undefined),\n        },\n        startReason,\n      });\n    } catch (error) {\n      // log that the sync could not be started for the shop but continue\n      Globals.logger.warn({ userVisible: true, error, shop: result }, \"couldn't start sync for shop\");\n    }\n  }\n}\n\nconst enum TenantType {\n  Shop = \"shop\",\n  Customer = \"customer\",\n}\n\nconst shopifyModelKey = (modelName: string): string => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-Shopify-${modelKey}`;\n};\n\n/**\n * Updates the state of a `bulkOperation` record from Shopify when the operation completes.\n *\n * @param record - the `bulkOperation` record updated\n */\nexport async function finishBulkOperation(record: GadgetRecord<any>): Promise<void> {\n  if (!record?.id) {\n    Globals.logger.warn(`Expected bulk operation record to be present for action`);\n    return;\n  }\n\n  const context = getActionContextFromLocalStorage();\n  const shopifyAPI = await (context.connections as Record<string, any>).shopify.forShopId(record.shopId);\n  if (!shopifyAPI) {\n    Globals.logger.error(`Could not instantiate Shopify client for shop ID ${record.shopId}`);\n    return;\n  }\n  const bulkOperation = (\n    await shopifyAPI.graphql(\n      `query {\n        node(id: \"${ShopifyBulkOperationGIDForId(record.id)}\") {\n          ... on BulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            type\n            partialDataUrl\n            rootObjectCount\n          }\n        }\n      }`,\n      {}\n    )\n  ).node;\n  // normalize the mixed upper/lowercase (GraphQL/REST) to lowercase\n  const { status, errorCode, type } = bulkOperation;\n  Object.assign(record, {\n    ...bulkOperation,\n    status: status?.toLowerCase(),\n    errorCode: errorCode?.toLowerCase(),\n    type: type?.toLowerCase(),\n    id: record.id,\n  });\n}\n\nconst ShopifyShopKey: string = shopifyModelKey(\"Shop\");\nconst ShopifyCustomerKey: string = shopifyModelKey(\"Customer\");\n\nconst ShopifyBulkOperationGIDForId = (id: string) => `gid://shopify/BulkOperation/${id}`;\n\ntype TemplateFile = {\n  filename: string;\n};\n\ntype GetThemeFilesResponse = {\n  themes: {\n    nodes: {\n      id: string;\n      files: {\n        nodes: TemplateFile[];\n        pageInfo: {\n          endCursor: string | null;\n          hasNextPage: boolean;\n        };\n      };\n    }[];\n  };\n};\n\ntype ThemeVersion = \"v1\" | \"v2\";\n\n/**\n * Determines the theme version (v1/liquid or v2/JSON) for Shopify template files by fetching the template files from the store and analyzing file extensions.\n * Note that `read_themes` Shopify API scope is required to fetch the files.\n *\n * @param {Shopify} shopify - The Shopify client to determine the theme version for.\n * @param {string[]} pageTypes - An optional array of template page type names to include in the analysis. The values should be Shopify page types. (https://shopify.dev/docs/api/liquid/objects/request#request-page_type)\n * @returns {Promise<{pageType: string; filename: string; version: ThemeVersion}[]>} An array of objects containing the page type name (e.g. \"index\", \"product\", \"customers/activate_account\"), filename, and theme version (v1/liquid or v2/JSONd)\n */\nexport const determineShopThemeVersion = async (\n  shopify: {\n    graphql: (data: string, variables?: any) => Promise<any>;\n  },\n  pageTypes?: string[]\n): Promise<\n  {\n    pageType: string;\n    filename: string;\n    version: ThemeVersion;\n  }[]\n> => {\n  const filenames: string[] = pageTypes?.flatMap((pageType) => [`templates/${pageType}.json`, `templates/${pageType}.liquid`]) ?? [];\n  if (filenames.length === 0) {\n    filenames.push(\"templates/*.json\", \"templates/*.liquid\");\n  }\n\n  const templateFiles: TemplateFile[] = [];\n  let previousFileCursor: string | null = null;\n  let hasNextPage = true;\n\n  // Get all template files from the theme\n  while (hasNextPage) {\n    const response: GetThemeFilesResponse = await shopify.graphql(\n      `\n      query GetThemeFiles ($filenames: [String!]!, $fileCursor: String) {\n        themes(first: 1, roles: [MAIN]) {\n          nodes {\n            files(first: 250, filenames: $filenames, after: $fileCursor) {\n              nodes {\n                filename\n              }\n              pageInfo {\n                endCursor\n                hasNextPage\n              }\n            }\n          }\n        }\n      }`,\n      {\n        filenames,\n        fileCursor: previousFileCursor,\n      }\n    );\n\n    const theme = response.themes.nodes[0];\n    if (!theme) {\n      throw new Error(\"Theme not found\");\n    }\n\n    templateFiles.push(...theme.files.nodes);\n\n    if (theme.files.pageInfo.hasNextPage) {\n      previousFileCursor = theme.files.pageInfo.endCursor;\n      hasNextPage = theme.files.pageInfo.hasNextPage;\n    } else {\n      hasNextPage = false;\n    }\n  }\n\n  return templateFiles.map((file) => {\n    const filename = file.filename;\n    const fileExtension = path.extname(filename);\n    const version = fileExtension === \".json\" ? \"v2\" : \"v1\";\n    const filePathWithoutTemplatesDirectory = filename.replace(\"templates/\", \"\");\n\n    /**\n     * Get a page type for the template. For example:\n     * - templates/product.json -> product\n     * - templates/customers/activate_account.liquid -> customers/activate_account\n     */\n    const pageType = path.join(\n      path.dirname(filePathWithoutTemplatesDirectory),\n      path.basename(filePathWithoutTemplatesDirectory, fileExtension)\n    );\n\n    return {\n      pageType,\n      filename,\n      version,\n    };\n  });\n};\n"],"names":["ShopifyBulkOperationState","ShopifySellingPlanGroupProductState","ShopifySellingPlanGroupProductVariantState","ShopifyShopState","ShopifySyncState","abortSync","determineShopThemeVersion","finishBulkOperation","globalShopifySync","preventCrossShopDataAccess","shopifySync","validShopsFilter","Installed","created","Uninstalled","Created","Running","Completed","Errored","Canceled","Failed","Expired","Started","Deleted","params","record","context","getActionContextFromLocalStorage","effectAPIs","syncRecord","assert","shopId","syncSinceBy","InvalidActionInputError","models","Array","isArray","every","m","sync","id","toString","syncSince","force","startReason","error","logger","connectionSyncId","syncId","errorMessage","info","userVisible","options","enforceCustomerTenancy","type","Error","model","appTenancy","AppTenancyKey","shopBelongsToField","customerBelongsToField","shopify","undefined","String","customerId","input","apiIdentifier","validateBelongsToLink","tenantId","tenantModelKey","ShopifyShopKey","tenantBelongsToField","tenantType","tenantName","ShopifyCustomerKey","shopModelFiles","filter","state","inState","additionalFilters","planNameField","find","f","planDisplayNameField","skipInvalidPlans","planCondition","AND","push","OR","planName","isSet","notIn","invalidPlanNames","planDisplayName","invalidPlanDisplayNames","getCurrentContext","api","apiKeys","length","shopModelIdentifier","installedViaKeyFieldIdentifier","shopifySyncModelApiIdentifier","runShopifySyncAction","accessTokenIdentifier","forceFieldIdentifier","getSyncIdentifiers","shopModel","getModelByApiIdentifier","manager","internalModelManagerForModel","pageSize","pageInfo","first","hasNextPage","results","Object","values","fields","map","in","records","findMany","after","endCursor","pagination","result","domain","myshopifyDomain","debug","kGlobals","platformModules","lodash","isEmpty","shopifySyncModelManager","get","dotNotationPath","shop","_link","Globals","warn","shopifyModelKey","modelName","modelKey","replaceAll","shopifyAPI","connections","forShopId","bulkOperation","graphql","ShopifyBulkOperationGIDForId","node","status","errorCode","assign","toLowerCase","pageTypes","filenames","flatMap","pageType","templateFiles","previousFileCursor","response","fileCursor","theme","themes","nodes","files","file","filename","fileExtension","path","extname","version","filePathWithoutTemplatesDirectory","replace","join","dirname","basename"],"mappings":"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"}